// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicLibrary.Data.Context;

#nullable disable

namespace MusicLibrary.Data.Migrations
{
    [DbContext(typeof(MusicLibraryDbContext))]
    [Migration("20230820025858_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("MusicLibrary.Core.Models.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("genre_id");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("BIT")
                        .HasColumnName("is_disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("artist", (string)null);
                });

            modelBuilder.Entity("MusicLibrary.Core.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("BIT")
                        .HasColumnName("is_disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("genre", (string)null);
                });

            modelBuilder.Entity("MusicLibrary.Core.Models.Production", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("artist_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("BIT")
                        .HasColumnName("is_disabled");

                    b.Property<byte>("ProductionType")
                        .HasColumnType("TINYINT")
                        .HasColumnName("production_type");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("TINYINT")
                        .HasColumnName("release_year");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("production", (string)null);
                });

            modelBuilder.Entity("MusicLibrary.Core.Models.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("BIT")
                        .HasColumnName("is_disabled");

                    b.Property<float>("Length")
                        .HasColumnType("TINYINT")
                        .HasColumnName("length");

                    b.Property<byte>("Position")
                        .HasColumnType("TINYINT")
                        .HasColumnName("position");

                    b.Property<Guid>("ProductionId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("production_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.ToTable("track", (string)null);
                });

            modelBuilder.Entity("MusicLibrary.Core.Models.Artist", b =>
                {
                    b.HasOne("MusicLibrary.Core.Models.Genre", "Genre")
                        .WithMany("Artists")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MusicLibrary.Core.Models.Production", b =>
                {
                    b.HasOne("MusicLibrary.Core.Models.Artist", "Artist")
                        .WithMany("Productions")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicLibrary.Core.Models.Track", b =>
                {
                    b.HasOne("MusicLibrary.Core.Models.Production", "Production")
                        .WithMany("Tracks")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");
                });

            modelBuilder.Entity("MusicLibrary.Core.Models.Artist", b =>
                {
                    b.Navigation("Productions");
                });

            modelBuilder.Entity("MusicLibrary.Core.Models.Genre", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("MusicLibrary.Core.Models.Production", b =>
                {
                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
